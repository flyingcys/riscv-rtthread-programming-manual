# 2、启动
## RISC-V 启动

[todo]

## CV1800B 启动
[todo]

## RT-Thread 内核启动

在 RT-Thread BSP 工程的中，入口函数为 applications/main.c 文件下的 main 函数，但是这个 main 函数实现的工作很简单，只有一句简单的 `rt_kprintfrt_kprintf("Hello, RISC-V!\n");`，或者在此 main 函数中创建并启动另外一个线程等工作，整个系统就开始正常运行了。但是我们没有添加 RT-Thread 内核相关初始化、启动等代码到我们的工程里面，实际情况是调度器已经正常运行了，这是怎么实现的呢？硬件初始化在哪里完成的呢？

### 1、 RT-Thread初始化入口
我们可以在 src/components.c 文件中看到 `#ifdef RT_USING_USER_MAIN` 宏定义判断，这个宏是定义在 rtconfig.h文 件内的，而且处于开启状态。该宏需要在 BSP 对应的目录下的 Kconfig 文件中通过 `select RT_USING_USER_MAIN` 启用。
在该文件中可以看到一下代码
```c
#ifdef __ARMCC_VERSION
extern int $Super$$main(void);
/* re-define main function */
int $Sub$$main(void)
{
    rtthread_startup();
    return 0;
}
#elif defined(__ICCARM__)
/* __low_level_init will auto called by IAR cstartup */
extern void __iar_data_init3(void);
int __low_level_init(void)
{
    // call IAR table copy function.
    __iar_data_init3();
    rtthread_startup();
    return 0;
}
#elif defined(__GNUC__)
/* Add -eentry to arm-none-eabi-gcc argument */
int entry(void)
{
    rtthread_startup();
    return 0;
}
#endif
```
通过 MDK/IAR/GCC 不同的编译器宏判断，调用了 `rtthread_startup()` 函数，熟悉 RT-Thread 开发流程的一看就知道这是标准的内核初始化函数。



在使用 GCC 编译器的项目中，需要在芯片启动文件中手工调用 `entry` 函数，才能进入内核自动启动流程，相关工作需在移植适配过程中完成。


### 2、内核初始化
`rtthread_startup()` 是 RT-Thread 初始化函数入口，上面介绍了可通过 `#ifdef RT_USING_USER_MAIN` 宏自动调用，也可以不启用该宏手工调用。
```c
int rtthread_startup(void)
{
	rt_hw_interrupt_disable();

    /* board level initalization
     * NOTE: please initialize heap inside board initialization.
     */
    rt_hw_board_init();

    /* show RT-Thread version */
    rt_show_version();

    /* timer system initialization */
    rt_system_timer_init();

    /* scheduler system initialization */
    rt_system_scheduler_init();

    /* create init_thread */
    rt_application_init();

    /* timer thread initialization */
    rt_system_timer_thread_init();

    /* idle thread initialization */
    rt_thread_idle_init();

    /* start scheduler */
    rt_system_scheduler_start();

    /* never reach here */
    return 0;
}
```
`rtthread_startup()` 函数完成了以下工作：
- rt_hw_interrupt_disable()：关中断操作。
- rt_hw_board_init()：该函数定义在 board.c 文件内，完成硬件 tick 定时器、heap 初始化等工作。
- rt_system_timer_init()/rt_system_timer_thread_init()：timer 初始化/启动。
- rt_thread_idle_init()：idle 任务创建。
- rt_application_init()：应用线程初始化。
- rt_system_scheduler_start()：调度器启动


### 3、应用线程入口
应用线程初始化函数 `rt_application_init()` 在 `rtthread_startup()` 中被调用。
```c
void rt_application_init(void)
{
    rt_thread_t tid;

#ifdef RT_USING_HEAP
    tid = rt_thread_create("main", main_thread_entry, RT_NULL,
                      RT_MAIN_THREAD_STACK_SIZE, RT_THREAD_PRIORITY_MAX / 3, 20);
    RT_ASSERT(tid != RT_NULL);
#else
    rt_err_t result;

    tid = &main_thread;
    result = rt_thread_init(tid, "main", main_thread_entry, RT_NULL,
                       main_stack, sizeof(main_stack), RT_THREAD_PRIORITY_MAX / 3, 20);
    RT_ASSERT(result == RT_EOK);
#endif

    rt_thread_startup(tid);
}
```

我们可以看到应用线程创建了一个名为 `main_thread_entry` 的任务，并且已经启动了该任务，再次来看一下 `main_thread_entry`  任务。
```c
/* the system main thread */
void main_thread_entry(void *parameter)
{
    extern int main(void);

#ifdef RT_USING_COMPONENTS_INIT
    /* RT-Thread components initialization */
    rt_components_init();
#endif /* RT_USING_COMPONENTS_INIT */

#ifdef RT_USING_SMP
    rt_hw_secondary_cpu_up();
#endif /* RT_USING_SMP */
    /* invoke system main function */
#ifdef __ARMCC_VERSION
    {
        extern int $Super$$main(void);
        $Super$$main(); /* for ARMCC. */
    }
#elif defined(__ICCARM__) || defined(__GNUC__) || defined(__TASKING__) || defined(__TI_COMPILER_VERSION__)
    main();
#endif
}
```
man_thread_entry 任务完成了 2 个工作：
- 调用 `rt_components_init()`，相关内容可以参考 [RT-Thread 自动初始化]() 一文。
- 进入应用代码真正的 main 函数。

在这里我们看到 MDK 是比较特殊的，是通过调用上面提到的 `$$Super$$main()`回到 `main()` 的，其他编译器是直接调用 `main()` 函数。应用层的 `main()` 函数其实只是 RT-Thread 的一个任务，该任务的优先级为 `RT_THREAD_PRIORITY_MAX / 3`，任务栈为 `RT_MAIN_THREAD_STACK_SIZE`，默认为 2048 字节。

```c
#ifdef RT_USING_USER_MAIN
#ifndef RT_MAIN_THREAD_STACK_SIZE
#define RT_MAIN_THREAD_STACK_SIZE     2048
#endif /* RT_MAIN_THREAD_STACK_SIZE */
#ifndef RT_MAIN_THREAD_PRIORITY
#define RT_MAIN_THREAD_PRIORITY       (RT_THREAD_PRIORITY_MAX / 3)
#endif /* RT_MAIN_THREAD_PRIORITY */
#endif /* RT_USING_USER_MAIN */
```

接下来就可以在 `main()` 函数中开始我们自己的工作了。

## RT-Thread 自动初始化

在使用 RT-Thread 过程中会遇到很多 `INIT_` 开头的宏，如驱动中的 `INIT_BOARD_EXPORT(rt_hw_wifi_init);`，wlan 框架中的 `INIT_PREV_EXPORT(rt_wlan_lwip_init);`。这些函数看到不到代码里面显式调用，但是在运行中又会运行了，那么它是在哪里被调用的呢？

### 1、自动初始化宏

通过查询对应的宏，在 `include/rtdef.h` 文件中找到了对应的很多类似的宏。

```c
/* initialization export */
#ifdef RT_USING_COMPONENTS_INIT
typedef int (*init_fn_t)(void);
    #ifdef RT_DEBUGING_INIT
        struct rt_init_desc
        {
            const char* fn_name;
            const init_fn_t fn;
        };
        #define INIT_EXPORT(fn, level)                                                       \
            const char __rti_##fn##_name[] = #fn;                                            \
            rt_used const struct rt_init_desc __rt_init_desc_##fn rt_section(".rti_fn." level) = \
            { __rti_##fn##_name, fn};
    #else
        #define INIT_EXPORT(fn, level)                                                       \
            rt_used const init_fn_t __rt_init_##fn rt_section(".rti_fn." level) = fn
    #endif
#else
#define INIT_EXPORT(fn, level)
#endif

/* board init routines will be called in board_init() function */
#define INIT_BOARD_EXPORT(fn)           INIT_EXPORT(fn, "1")

/* init cpu, memory, interrupt-controller, bus... */
#define INIT_CORE_EXPORT(fn)            INIT_EXPORT(fn, "1.0")
/* init pci/pcie, usb platform driver... */
#define INIT_FRAMEWORK_EXPORT(fn)       INIT_EXPORT(fn, "1.1")
/* init platform, user code... */
#define INIT_PLATFORM_EXPORT(fn)        INIT_EXPORT(fn, "1.2")
/* init sys-timer, clk, pinctrl... */
#define INIT_SUBSYS_EXPORT(fn)          INIT_EXPORT(fn, "1.3")
/* init early drivers */
#define INIT_DRIVER_EARLY_EXPORT(fn)    INIT_EXPORT(fn, "1.4")

/* pre/device/component/env/app init routines will be called in init_thread */
/* components pre-initialization (pure software initialization) */
#define INIT_PREV_EXPORT(fn)            INIT_EXPORT(fn, "2")
/* device initialization */
#define INIT_DEVICE_EXPORT(fn)          INIT_EXPORT(fn, "3")
/* components initialization (dfs, lwip, ...) */
#define INIT_COMPONENT_EXPORT(fn)       INIT_EXPORT(fn, "4")
/* environment initialization (mount disk, ...) */
#define INIT_ENV_EXPORT(fn)             INIT_EXPORT(fn, "5")
/* application initialization (rtgui application etc ...) */
#define INIT_APP_EXPORT(fn)             INIT_EXPORT(fn, "6")

/* init after mount fs */
#define INIT_FS_EXPORT(fn)              INIT_EXPORT(fn, "6.0")
/* init in secondary_cpu_c_start */
#define INIT_SECONDARY_CPU_EXPORT(fn)   INIT_EXPORT(fn, "7")
```

不同的宏又都被定义到了同一个宏函数 `INIT_EXPORT(fn, level)`，只有 `level` 对应的数字不同。
再深入分析可以看到，`INIT_EXPORT()` 通过 `RT_USING_COMPONENTS_INIT` 宏做了区别，使能该宏之后 `INIT_EXPORT(fn, level)` 函数会被替换为 `rt_used const init_fn_t __rt_init_##fn rt_section(".rti_fn." level) = fn`。

如 `INIT_BOARD_EXPORT(rt_hw_spi_init);` 通过宏替换和编译器的 `##` 连接符，成为 `rt_used const init_fn_t __rt_init_rt_hw_spi_init rt_section(".rti_fn." 1) = rt_hw_spi_init;`。
其中：
1. rt_used
```c
#define rt_used                     __attribute__((used))
```
2. `init_fn_t` 是指向函数指针。
3. rt_section
```c
#define rt_section(x)               __attribute__((section(x)))
```
`INIT_BOARD_EXPORT(rt_hw_uart_init);` 宏替换完之后，就是定义了一个指向函数的指针变量 `__rt_init_rt_hw_spi_init`，该变量值为 `rt_hw_spi_init`，同时该变量位于 `.rti_fn.1` 段， 该符号段位于内存分配的 RO 段中。
分析完之后，还需要实际验证一下。打开 bsp 目录下对应工程编译后的 map 文件，搜索 `.rti_fn` 相关的内容，可以看到以下内容： 
```c
                0x00000000802686a0                __rt_init_start = .
 *(SORT_BY_NAME(.rti_fn*))
 .rti_fn.0      0x00000000802686a0        0x8 build/kernel/src/components.o
                0x00000000802686a0                __rt_init_rti_start
 .rti_fn.0.end  0x00000000802686a8        0x8 build/kernel/src/components.o
                0x00000000802686a8                __rt_init_rti_board_start
 .rti_fn.1      0x00000000802686b0        0x8 build/kernel/components/drivers/ktime/src/hrtimer.o
                0x00000000802686b0                __rt_init_rt_ktime_hrtimer_lock_init
 .rti_fn.1      0x00000000802686b8        0x8 build/kernel/libcpu/risc-v/t-head/c906/backtrace.o
                0x00000000802686b8                __rt_init_rt_hw_backtrace_init
 .rti_fn.1      0x00000000802686c0        0x8 build/drivers/drv_spi.o
                0x00000000802686c0                __rt_init_rt_hw_spi_init
 .rti_fn.1.end  0x00000000802686c8        0x8 build/kernel/src/components.o
                0x00000000802686c8                __rt_init_rti_board_end
 .rti_fn.2      0x00000000802686d0        0x8 build/kernel/components/dfs/dfs_v1/src/dfs.o
                0x00000000802686d0                __rt_init_dfs_init
 .rti_fn.2      0x00000000802686d8        0x8 build/kernel/components/lwp/lwp_pmutex.o
                0x00000000802686d8                __rt_init_pmutex_system_init
 .rti_fn.2      0x00000000802686e0        0x8 build/kernel/components/drivers/ipc/workqueue.o
                0x00000000802686e0                __rt_init_rt_work_sys_workqueue_init
 .rti_fn.2      0x00000000802686e8        0x8 build/kernel/components/drivers/sdio/mmcsd_core.o
                0x00000000802686e8                __rt_init_rt_mmcsd_core_init
 .rti_fn.3      0x00000000802686f0        0x8 build/kernel/components/drivers/tty/pty.o
                0x00000000802686f0                __rt_init_ptmx_register
 .rti_fn.3      0x00000000802686f8        0x8 build/kernel/components/lwp/lwp_syscall.o
                0x00000000802686f8                __rt_init_critical_init
 .rti_fn.3      0x0000000080268700        0x8 build/drivers/drv_gpio.o
                0x0000000080268700                __rt_init_rt_hw_gpio_init
 .rti_fn.3      0x0000000080268708        0x8 build/kernel/components/drivers/misc/rt_null.o
                0x0000000080268708                __rt_init_null_device_init
 .rti_fn.3      0x0000000080268710       0x10 build/kernel/components/drivers/misc/rt_random.o
                0x0000000080268710                __rt_init_random_device_init
                0x0000000080268718                __rt_init_urandom_device_init
 .rti_fn.3      0x0000000080268720        0x8 build/kernel/components/drivers/misc/rt_zero.o
                0x0000000080268720                __rt_init_zero_device_init
 .rti_fn.4      0x0000000080268728        0x8 build/kernel/components/dfs/dfs_v1/filesystems/elmfat/dfs_elm.o
                0x0000000080268728                __rt_init_elm_init
 .rti_fn.4      0x0000000080268730        0x8 build/kernel/components/dfs/dfs_v1/filesystems/romfs/dfs_romfs.o
                0x0000000080268730                __rt_init_dfs_romfs_init
 .rti_fn.4      0x0000000080268738        0x8 build/kernel/components/drivers/tty/console.o
                0x0000000080268738                __rt_init_rx_thread_init
 .rti_fn.5      0x0000000080268740        0x8 build/kernel/components/libc/posix/io/stdio/stdio.o
                0x0000000080268740                __rt_init_rt_posix_stdio_init
 .rti_fn.6      0x0000000080268748        0x8 build/kernel/components/finsh/shell.o
                0x0000000080268748                __rt_init_finsh_system_init
 .rti_fn.6      0x0000000080268750        0x8 build/drivers/drv_spi.o
                0x0000000080268750                __rt_init_rt_spi_device_init
 .rti_fn.6.end  0x0000000080268758        0x8 build/kernel/src/components.o
                0x0000000080268758                __rt_init_rti_end
                0x0000000080268760                __rt_init_end = .
```
`__rt_init_rt_hw_spi_init` 在 `0x00000000802686c0` 地址。


### 2、自动运行
上面介绍了自动初始化的宏及展开后对应的指向函数的指针变量定义，那么真正是在哪里调用这些指向函数的指针的呢？通过宏 `RT_USING_COMPONENTS_INIT` 在 `src/components.c` 文件中可以找到答案。
该宏需要在 BSP 对应的目录下的 Kconfig 文件中通过 `select RT_USING_COMPONENTS_INIT` 启用。

1. `rt_components_board_init()` 函数在 `rt_hw_board_init()` 函数中被调用，`rt_hw_board_init()` 函数需在 bsp 对应的芯片下实现。

代码较简单，就是循环调用 `__rt_init_rti_board_start` 和 `__rt_init_rti_board_end` 之间的函数。

```c
/**
 * @brief  Onboard components initialization. In this function, the board-level
 *         initialization function will be called to complete the initialization
 *         of the on-board peripherals.
 */
void rt_components_board_init(void)
{
#ifdef RT_DEBUGING_INIT
    int result;
    const struct rt_init_desc *desc;
    for (desc = &__rt_init_desc_rti_board_start; desc < &__rt_init_desc_rti_board_end; desc ++)
    {
        rt_kprintf("initialize %s", desc->fn_name);
        result = desc->fn();
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
    {
        (*fn_ptr)();
    }
#endif /* RT_DEBUGING_INIT */
}
```
你会发现 `__rt_init_rti_board_start` 和 `__rt_init_rti_board_end` 这 2 个变量没有在代码中定义，那么这 2 个变量在哪里呢？答案就是下面这段代码：

```c
static int rti_start(void)
{
    return 0;
}
INIT_EXPORT(rti_start, "0");

static int rti_board_start(void)
{
    return 0;
}
INIT_EXPORT(rti_board_start, "0.end");

static int rti_board_end(void)
{
    return 0;
}
INIT_EXPORT(rti_board_end, "1.end");

static int rti_end(void)
{
    return 0;
}
INIT_EXPORT(rti_end, "6.end");
```

上面我们分析过 `INIT_EXPORT(fn, level)` 这个宏函数，把以上 4 个函数做宏替换后分别为 `__rt_init__rti_start`， `__rt_init_rti_board_start`，`__rt_init_rti_board_end`，`__rt_init_rti_end`。

所以 `rt_components_board_init()` 函数作用就是将从 `INIT_BOARD_EXPORT` 宏定义的函数开始，到 `INIT_PREV_EXPORT` 宏定义的函数之前的所有函数，依次调用。

2. `rt_components_init()` 在内核启动后，进入应用代码之前调用。同样，循环调用 `__rt_init_rti_board_end` 和 `__rt_init_rti_end` 之间的函数。
```c
/**
 * @brief  RT-Thread Components Initialization.
 */
void rt_components_init(void)
{
#ifdef RT_DEBUGING_INIT
    int result;
    const struct rt_init_desc *desc;

    rt_kprintf("do components initialization.\n");
    for (desc = &__rt_init_desc_rti_board_end; desc < &__rt_init_desc_rti_end; desc ++)
    {
        rt_kprintf("initialize %s", desc->fn_name);
        result = desc->fn();
        rt_kprintf(":%d done\n", result);
    }
#else
    volatile const init_fn_t *fn_ptr;

    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
    {
        (*fn_ptr)();
    }
#endif /* RT_DEBUGING_INIT */
}
```

通过 `rt_components_board_init()` 和 `rt_components_init()` 函数，就完成了所有需要自动初始化函数的调用。

### 3、启动顺序
在日常使用中，功能的初始化是需要有先后循序的。根据上面的分析，RT-Thread 通过不同的宏完成顺序调用。
1. `rt_components_board_init()` 函数较 `rt_components_init()` 先被调用，所以 `INIT_BOARD_EXPORT` 相关的 BOARD 板级资源初始化优先被调用了，主要用于初始化相关的硬件环境，此时调度器尚未启动。
2. `rt_components_init()` 在调度器启动后被调用，此时硬件环境和操作系统已经初始化完成，可以执行与应用程序相关的代码。
| 初始化顺序 | 宏接口                      | 描述                                         |
|----------|-------------------------------|----------------------------------------------|
| 1        | INIT_BOARD_EXPORT(fn) | 很早的初始化，调度器尚未启动。                       |
| 2        | INIT_PREV_EXPORT(fn) | 主要用于纯软件初始化，没有太多依赖关系的函数。             |
| 3        | INIT_DEVICE_EXPORT(fn) | 外设驱动程序初始化相关，如网络卡设备。                    |
| 4        | INIT_COMPONENT_EXPORT(fn) | 组件初始化，如文件系统或 LWIP。                        |
| 5        | INIT_ENV_EXPORT(fn) | 系统环境初始化，如挂载文件系统。                         |
| 6        | INIT_APP_EXPORT(fn) | 应用程序初始化，如应用程序 GUI。                         |


### 4、ld文件中的KEEP
我们知道，代码编译过程的最后一步链接，链接器会将我们未使用到的函数优化，不加入到最终的可执行文件中。上面说到的自动初始化的函数都没有被显式调用。如果没有做特殊处理，上面的函数都不会被执行，这里就要用的 ld 文件中的关键字 `KEEP`。

在所有的 RT-Thread bsp 目录下的工程，以 gcc 工程为例，会在链接文件 `.ld` 或 `.lds` 中加入以下一段语句: 
```c
        /* section information for finsh shell */
        . = ALIGN(8);
        __fsymtab_start = .;
        KEEP(*(FSymTab))
        __fsymtab_end = .;
        . = ALIGN(8);
        __vsymtab_start = .;
        KEEP(*(VSymTab))
        __vsymtab_end = .;
        . = ALIGN(8);

        /* section information for initial. */
        . = ALIGN(8);
        __rt_init_start = .;
        KEEP(*(SORT(.rti_fn*)))
        __rt_init_end = .;
        . = ALIGN(8);

        __rt_utest_tc_tab_start = .;
        KEEP(*(UtestTcTab))
        __rt_utest_tc_tab_end = .;
```

通过
```c
__rt_init_start = .;
KEEP(*(SORT(.rti_fn*)))
__rt_init_end = .;KEEP(*(SORT(.rti_fn*)))
```

语句将所有的 `.rti_fn*` 的段，排序后放在 __rt_init_start 和 __rt_init_end 之间，KEEP 关键字强制链接器保留某些特定部分。

其他的几个段作用分别为：
- FSymTab：shell 相关的符号表
- VSymTab：v5.x 源码中未找到相关的定义，应该是为了老代码兼容
- UtestTcTab：utest 相关的符号表