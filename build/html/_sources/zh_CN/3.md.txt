# 3、异常与中断

异常，即处理器在顺序执行程序指令流的过程中突然遇到了异常的事情而中止执行当前的程序，转而去执行别的事情。
异常处理是处理器的意向重要功能，在某些异常事件产生时，用力啊使处理器转入对这些事件的处理。这些事件包括硬件处理、指令执行错误、用户程序请求服务等。

异常被分为两种：

- 同步异常：执行某个程序流，能稳定复现的的异常，能比较精确的确定是那条指令引发的异常。（例如程序流里有一条非法指令，属于内因。）

- 异步异常：异常产生的原因与当前的程序流无关，与外部的中断事件有关。（由外部事件引起的，属于外因。）

中断，即处理器在顺序执行程序指令流的过程中突然被别的请求打断而中止执行当前的程序，转而去执行别的事情，待其处理完了别的事情然后重新回到之前程序中断的点继续执行之前的程序指令流。

在 RISC-V 中，中断（interrupt）和异常（exception）被统称为 trap。

### 1、名词介绍
在 RISC v 中，与中断有关的硬件单元主要有 ACLINT、CLINT、PLIC、CLIC。

CLINT 的全称是 Core Local Interrupt，ACLINT 的全称是 Advanced Core Local Interrupt, CLIC 的全称是 Core-Local Interrupt Controller。

PLIC 的全称 Platform-Level Interrupt Controller。

尽管 CLIC 与 PLIC 名称相似，但是 CLIC 其实是为取代 CLINT 而设计的。ACLINT 是为了取代 SiFive CLINT 而设计的，本质上讲，ACLINT 相比于 CLINT 的优势就在于进行了模块化设计，将定时器和 IPI 功能分开了，同时能够支持 NUMA 系统。但是 ACLINT 和 CLINT 都还是 RISC-V basic local Interrupts 的范畴。

PLIC 和 CLIC 的区别在于，前者负责的是整个*台的外部中断，CLIC 负责的是每个 HART 的本地中断。



### CLINT

### CLIC


### PLIC
PLIC(platform-level interrupt controller)，平台级中断控制器。用来将外部的全局中断请求处理后转至中断目标。PLIC理论上支持1023个外部中断源和15872个上下文，但真实设计实现时一般不需要这么多。

### 2、寄存器
八个控制状态寄存器（CSR）是机器模式下异常处理的必要部分：

### MTVEC（Machine Trap Vector）
机器模式向量基址寄存器（MTVEC）用于配置异常服务程序的入口地址以及中断与异常服务程序的入口地址寻址模式。MTVEC 是位宽为 XLEN 的读/写寄存器。

![MTVEC](/img/risc-v/risc-v/interrupt/MTVEC.png)

- BASE-向量基址位：向量基址位指示了异常服务程序入口地址的高 37 位，将此基址拼接 2’ b00 即可得到异常服务程序入口地址。
> 该位在复位后置为 62’ h0。

- MODE-向量入口模式位：
    - 当 MODE[1:0] 为 2’ b00 时，异常和中断都统一使用 BASE 地址作为异常入口地址。
    - 当 MODE[1:0] 为 2’ b01 时，异常使用 BASE 地址作为入口地址，中断使用 BASE +4*Exception Code。
    - 硬件配置 CLIC 模式时， MODE[1:0] 新增 2’ b10 和 2’ b11 配置。处理器在该两种模式下，异常入口地址会被约束为 64 字节对齐。
    - 当 MODE[1:0] 是 2’ b10 时，保留。
    - 当 MODE[1:0] 是 2’ b11 时， CPU 使用 MTVEC[31:6]<<6 作为异常的服务程序入口地址并跳转执行，硬件矢量中断模式下， CPU 首先使用 MTVT + 4* 中断 ID 为地址，取出中断服务程序入口地址，并跳转到该入口地址执行中断服务程序，非硬件矢量中断模式下 CPU 使用 MTVEC[31:6]<<6 作为中断服务程序入口地址并跳转执行。 MTVT 为矢量中断基址寄存器，在 CLIC 配置下存在。

> 在 E90X 系列芯片中 MODE[1:0] 硬件固定设置为 3，软件不可设置。

### MTVT（）
机器模式矢量中断基址寄存器（MTVT）用于配置矢量中断服务程序的入口地址。

![MTVT](/img/risc-v/risc-v/interrupt/MTVT.png)

BASE-向量基址位：

向量基址位指示了矢量中断向量表基址，处理器通过计算该基址加上每个中断的地址偏移量（MTVT+4* 中断 ID）得到矢量中断向量表中每个中断服务程序的入口地址并跳转执行。
该基址域复位值为零。

### MEPC（Machine Exception PC）：指向发生异常的指令。
机器模式异常程序计数器（MEPC）用于存储程序从异常服务程序退出时要返回的程序计数器值（即 PC值）。

E907 支持 16 位宽指令， PC 值以半字对齐，因此 MEPC 的最低位为常零，剩余高 31 位为写有效区域。

### MCAUSE（Machine Exception Cause）
机器模式异常向量寄存器（MCAUSE）用于保存触发异常的异常事件向量号，用于在异常服务程序中处理对应事件。

![MCAUSE](/img/risc-v/risc-v/interrupt/MCAUSE.png)

- [31]Interrupt-中断标记位：
    - 当 Interrupt 位为 0 时，表示触发异常的来源不是中断， Exception Code 按照普通异常规则解析；
    - 当 Interrupt 位为 1 时，表示触发异常的来源是中断， Exception Code 按照中断规则解析。
    - 该位复位值为零。

- [30]MINHV-矢量中断跳转指示位
用于指示处理器是否正在取矢量中断入口地址，在处理器响应矢量中断时，该位会被置高。成功获取矢量中断服务程序入口地址后清 0。该位复位值为零。

- [29:28]MPP-机器模式保留特权状态位
该位为 MSTATUS.MPP[1:0] 的镜像，即读写 MCAUSE.MPP 将会与读写 MSTATUS.MPP 产生相同结果。

- [27]MPIE-机器模式保留中断使能位
该位为 MSTATUS.MPIE 的镜像。

- [23:16]MPIL-机器模式保留中断优先级位
该位保存处理器进入中断服务程序前的中断优先级，即将 MINTSTATUS.MIL 位拷贝至该位。执行 MRET 指令从中断返回时，处理器将 MPIL 位拷贝至 MINTSTATUS 寄存器中的 MIL 位。处理器响应异常时，该位保持不变。

- [11:0]Exception Code-异常向量号位：
在处理器进入异常时，异常向量号域会被更新为异常来源的向量号。
在处理器配置了 CLIC 模式时，该位域扩展为 12 位，支持最多 4096 个中断 ID 号记录。
该位复位值为零

### MIE（Machine Interrupt Enable）
机器模式中断使能控制寄存器（MIE）用于控制机器模式下 CLINT 中不同中断类型的局部屏蔽。

![MIE](/img/risc-v/risc-v/interrupt/MIE.png)

- [3]MISE：机器模式软件中断使能位
    - 当 MISE 为 0 时，机器模式软件中断未使能；
    - 当 MISE 为 1时，机器模式软件中断使能。

- [7]MTIE：机器模式计时器中断使能位
    - 当 MTIE 为 0 时，机器模式计时器中断未使能；
    - 当 MTIE 为 1 时机器模式计时器中断使能。

- [11]MEIE：外部中断使能位
    - 当 MEIE 为 0 时，外部中断无效，处理器在低功耗模式下无法被外部中断唤醒；
    - 当 MEIE 为 1 时，外部中断有效，处理器在低功耗模式下可以被外部中断唤醒；
    - 当处理器配置 CLIC 模式时，且处理器 MTVEC 寄存器配置为 CLIC 模式下（MTVEC.mode[1] 为 1’ b1），该寄存器将会置 0。 

### MIP（Machine Interrupt Pending）：列出目前正准备处理的中断。

机器模式中断等待寄存器（MIP）用于保存处理器的中断等待状态，该寄存器仅在非 CLIC 模式下有意义。当中断处于等待状态时， MIP 寄存器中的对应位会被置位。

E907 实现了 CLIC 模式，因此该寄存器值为零，软件不可写。

### MTVAL（Machine Trap Value）：保存了陷入（trap）的附加信息：地址例外中出错的地址、发生非法指令例外的指令本身，对于其他异常，它的值为 0。

机器模式异常原因寄存器（MTVAL）用于保存触发异常事件的具体原因，比如访问错误异常的错误访问地址等。

### MSCRATCH mscratch（Machine Scratch）：暂时存放一个字大小的数据。

机器模式数据备份寄存器（MSCRATCH）用于处理器在异常服务程序中备份临时数据。一般用来存储机器模式本地上下文空间的入口指针值。

### MSTATUS（Machine Status）

机器模式处理器状态寄存器（MSTATUS）存储了处理器在机器模式下的状态和控制信息，包括全局中断有效位、异常保留中断有效位、异常保留特权模式位等。

![MSTATUS](/img/risc-v/risc-v/interrupt/MSTATUS.png)

- [3]MIE：机器模式全局中断使能位
    - 当 MIE 为 0 时，中断无效；
    - 当 MIE 为 1 时，中断有效。该位复位值为零，也在处理器响应异常时被清零；在处理器退出异常时被置为 MPIE 的值。

- [7]MPIE：机器模式保留中断使能位
该位用于保存处理器进入异常服务程序前 MIE 位的值。该位复位值为零，在处理器退出异常服务程序时被置 1。

- [12:11]MPP：机器模式保留特权状态位
该位用于保存处理器进入异常服务程序前的特权状态。当 MPP 为 2’ b00 时，表示处理器进入异常服务程序前处于用户模式；当 MPP 为 2’ b11 时，表示处理器进入异常服务程序前处于机器模式；该域复位值为 2’ b11。

- [14:13]FS：浮点寄存器状态位
该域仅在配置硬件浮点时存在，用于指示浮点控制寄存器以及浮点通用寄存器的状态。
    - 2’ b00：无法访问浮点控制寄存器和浮点通用寄存器，访问这类寄存器会触发非法指令异常；
    - 2’ b01：浮点控制寄存器和浮点通用寄存器处于初始化状态；
    - 2’ b10：浮点控制寄存器和浮点通用寄存器是干净的；
    - 2’ b11：部分浮点控制寄存器或者浮点通用寄存器被写脏过；

在系统初始化时可将该域设置为 2’ b01 或者 2’ b10，硬件在程序运行中会维护 FS 域。在异常或中断服务程序入口如果判断 FS 非 2’ b11 的话，表明响应中断前没有将浮点相关寄存器现场写脏，因此异常或者中断服务程序的入口也无需对这些现场进行保存。

> 该域复位值为 2’ b00。

- [16:15]XS：用户模式浮点扩展状态位
该域仅在配置硬件浮点时有意义， E907 将其硬件绑为 0。

- [17]MPRV：存储特权位
当 MPRV 为 0 时，访存地址的转换和保护判断没有特殊要求；当 MPRV 为 1 时，加载和存储指令（load/store）要根据 MPP 位中存储的特权模式信息进行地址转换和保护判断。取指的地址转换和保护判断不受该位影响。该位复位值为零。

在处理器 CLIC 模式下， MPP 位和 MPIE 位可以通过 MCAUSE 寄存器访问得到。

### 3、异常处理机制

异常处理是处理器根据内部或外部的异常事件从正常的程序处理转入特定的异常处理程序。

- 引起异常的外部事件包括：外部设备的中断请求、读写访问错误。

- 引起异常的内部事件包括：非法指令和非对齐访问错误（misaligned error）。ECALL 和 EBREAK 指令正常执行时也会产生异常。

异常处理利用异常矢量表跳转到异常服务程序的入口。

异常处理的关键是在异常发生时，保存 CPU 当前指令运行的状态，在退出异常处理时恢复异常处理前的状态。

如果异常事件是外部中断服务请求，被中断的指令将正常退休并改变 CPU 的状态，它的下一条指令的地址（PC+2/PC+4，根据当前指令是 16 位或 32 位决定 +2 或者 +4）将被保存在异常保留程序计数器（MEPC）中作为中断返回时指令的入口；

如果异常事件是由访问错误指令产生的，因为这条指令不能完成，它将异常退休但不改变 CPU 的状态 (即不改变寄存器的值)，这条访问错误地址指令的地址（PC）将被保存在异常保留程序计数器（MEPC）中， CPU 从异常服务程序返回时继续执行这条访问错误指令。

RISC-V架构规定，进入异常和退出异常中没有硬件自动保存和恢复上下文的操作，因此需要软件明确地使用指令进行山下文的保存和恢复。

按照 RISC-V 标准定义，中断优先级高于异常，异常内部优先级定义如 表 6.2 所示。 E907 将 NMI 的异常矢量号定义为 24，并将其设置为所有中断和异常中优先级最高的异常类型。


### 4、异常响应
RISC-V 编程模型中没有异常使能寄存器，因此一旦触发异常即可进行响应。按照 RISC-V 标准定义，
中断优先级高于异常，异常内部优先级定义如 表 6.2 所示。 E907 将 NMI 的异常向量号定义为 24，并将其
设置为所有中断和异常中优先级最高的异常类型。

异常优先级定义

| 优先级 | 向量号 | 异常类型 |
|------- | ----- | ------- |
| 最高 | 3 | 调试断点异常 |
|  | 1 | 取指令访问错误异常 |
|  | 2 | 非法指令异常 |
|  | 8 | 用户模式环境调用异常 |
|  | 11 | 机器模式环境调用异常 |
|  | 6 | 存储指令非对齐访问异常 |
|  | 4 | 加载指令非对齐访问异常 |
|  | 7 | 存储指令访问错误异常 |
|  | 5 | 加载指令访问错误异常 |

异常响应会打断 CPU 正常的程序执行轨迹，转而处理该异常事件，因此在异常响应时需要对 CPU 现场状态进行保存，并在 CPU 退出异常服务程序时恢复现场并执行异常响应前的程序流。

异常响应按如下步骤进行现场保存：
异常按以下步骤被处理，所有步骤在一个处理器时钟周期完成：
1. 处理器保存 PC 到异常保留程序计数器（MEPC）中。
2. 将 MCAUSE 中的异常矢量号 Exception Code 域更新为当前发生的异常矢量号，标识异常类别，具体矢量号如
表 6.1 所示。
3. 将 MSTATUS 中的中断使能位 MIE 保存到 MPIE 中。
4. 将 MSTATUS 中的中断使能位 MIE 位清零，禁止响应中断。
5. 将 MXSTATUS 中的 PM 域保存到 MSTATUS 寄存器的 MPP 域，并将 PM 设置为机器模式，即异常响应后
CPU 进入机器模式。
6. 将产生异常事件的原因更新到 MTVAL 寄存器，如 表 6.3 所示。
7. 处理器根据矢量基址寄存器 MTVEC 中的基址得到异常服务程序入口地址进行跳转执行。


所有异常的跳转入口均由 MTVEC 寄存器定义，从该地址取回的第一笔数据即为异常服务程序的第一
条指令。因为 E907 只实现 MTVEC.mode=3 这一模式，因此要求异常服务程序的入口地址为 64 字节对齐。

1.3 更新CSR寄存器mepc

RISC-V架构定义异常的返回地址由机器模式异常PC寄存器mepe (Machine Exception Program Counter)保存。在进入异常时，硬件将白动更新mepc寄存器的值为当前遇到异常的指令PC值(即当前程序的停止执行点)。该寄存器将作为异常的返回地址，在异常结束之后，能够使用它保存的PC值回到之前被停止执行的程序点。

(1)值得注意的是，虽然mope寄存器会在异常发生时自动被硬件更新，但是mcpe寄仔器本身也是一个可读可写的寄存器，因此软件也可以直接写该寄存器以修改其值。
(2)对于狭义的中断和狭义的异常而言，RISV-V 架构定义其返回地址(更新mepc)有些细微差别。
出现中断时，中断返回地址mepc的值被更新为下一条尚未执行的指令。
出现异常时，中断返回地址mepc的值被更新为当前发生异常的指令PC。注意:如果异常由ecall或ebreak产生，由于mepc的值被更新为ecall或ebreak指令自己的PC.因此在异常返回时，如果直接使用mepc保存的PC值作为返回地址，则会再次跳回ecall或者ebreak指令，从而造成死循环(执行ecall或者ebreak 指令导致重新进入异常)。正确的做法是在异常处理程序中软件改变mepc指向下一条指令， 由于现在ecall/ebreak (或c.ebreak) 是4 (或2)字节指令，因此改写设定mepe mepc+4 (或+2)即可。

### 异常处理
所有异常的跳转入口均由 MTVEC 寄存器定义，从该地址取回的第一笔数据即为异常服务程序的第一条指令。在 CPU 跳转到该入口执行程序时，软件可依据 MCAUSE 寄存器中的异常矢量号来决定是否在异常服务程序中实现再次跳转到各自对应的服务程序进行处理。需要注意的是，除了在异常响应时对必要的 CSR 寄存器及 PC 等现场状态进行保存外，在异常服务程序入口需要
软件对 GPR 等需要用到的寄存器进行压栈处理。

### 异常返回



## 2、中断
RISC-V 架构一共定义了 4 种中断类型：

外部中断：外部中断是处理器核的一个单比特输入信号，如果要支持更多的外部中断，那么就需要在这个单比特信号的基础之上引入一个 PLIC 中断控制器。

计时器中断：RISC-V 架构定义了两个 64 位的寄存器 mtime 与 mtimecmp 。mtime 寄存器里的值会恒定频率递增，当 mtime 的值大于等于 mtimecmp 的值时就会产生计时器中断。

软件中断：软件自己触发的中断。（通过程序上写 1 到 msio 寄存器，即可触发软件中断。）

调试中断：用于实现调试器。

RISC-V 标准的 CLINT 中断，包括机器模式软件中断、机器模式计时器中断以及机器模式外部中断， RISC-V 标准的中断控制器 CLIC



## 3、矢量中断与非矢量中断

在处理riscv处理器中断的时候，需要弄清楚两个概念矢量中断与非矢量中断

矢量中断就是不同的中断有不同的入口地址，非矢量中断就只有一个入口地址，进去了在判断中断标志来识别具体是哪个中断。

- 矢量中断实时性好，非矢量中断简单。
- 矢量中断——由硬件提供中断服务程序入口地址，非矢量中断——由软件件提供中断服务程序入口地址。
- 矢量中断模式，其中断发生后，PC 指针会根据中断的类型跳转到基地址 + 中断号 * 4的地址处去执行中断处理程序；非矢量中断模式，有一个寄存器标识位，跳转到统一的函数地址，此函数通过判别寄存器标识位和优先级关系进行中断处理。


- 矢量中断
可通过将 CLIC 中每个中断的中断属性寄存器（CLICINTATTR） 中的 shv 域设置为 1 来指示该中断为硬件矢量中断。
异常入口地址为 mtvec[31:6]<<6, 中断入口地址 mtvt[31:0]+ 4* 中断 ID

- 非矢量模式:
异常和中断入口地址为 mtvec[31:6]<<6

trap_handler 为 2^6 地址对齐








## 6、移植第五阶段：msh
[todo]



